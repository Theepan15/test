{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "JsonRadio2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RadioTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "CountofSubsTypeByGender"
				},
				{
					"name": "OriginalData"
				},
				{
					"name": "SubsbyLocation"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "Cleanup"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ts as string,",
				"          userId as string,",
				"          sessionId as integer,",
				"          page as string,",
				"          auth as string,",
				"          method as string,",
				"          status as integer,",
				"          level as string,",
				"          itemInSession as integer,",
				"          location as string,",
				"          lastName as string,",
				"          firstName as string,",
				"          registration as integer,",
				"          gender as string,",
				"          artist as string,",
				"          song as string,",
				"          length as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     partitionBy('roundRobin', 200)) ~> source1",
				"source1 select(mapColumn(",
				"          timestamp = ts,",
				"          page,",
				"          method,",
				"          status,",
				"          level,",
				"          location,",
				"          lastName,",
				"          firstName,",
				"          registration,",
				"          gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(gender,",
				"          level),",
				"     CountofSubtypeGender = count(),",
				"          timestamp = first(timestamp)) ~> CountofSubsTypeByGender",
				"select1 select(mapColumn(",
				"          timestamp,",
				"          page,",
				"          method,",
				"          status,",
				"          level,",
				"          location,",
				"          lastName,",
				"          firstName,",
				"          registration,",
				"          gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OriginalData",
				"select1 aggregate(groupBy(location),",
				"     SubsByLocation = count(),",
				"          timestamp = first(timestamp)) ~> SubsbyLocation",
				"OriginalData, CountofSubsTypeByGender join(OriginalData@timestamp == CountofSubsTypeByGender@timestamp,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, SubsbyLocation join(OriginalData@timestamp == SubsbyLocation@timestamp,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          timestamp = OriginalData@timestamp,",
				"          page,",
				"          method,",
				"          status,",
				"          level = OriginalData@level,",
				"          location = OriginalData@location,",
				"          lastName,",
				"          firstName,",
				"          registration,",
				"          gender = OriginalData@gender,",
				"          gender = CountofSubsTypeByGender@gender,",
				"          level = CountofSubsTypeByGender@level,",
				"          timestamp = CountofSubsTypeByGender@timestamp,",
				"          CountofSubtypeGender,",
				"          location = SubsbyLocation@location,",
				"          SubsByLocation,",
				"          timestamp = SubsbyLocation@timestamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Cleanup",
				"Cleanup derive(fullname = firstName + \" \" + lastName,",
				"          state = split(location,', ')[2]) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          col1 as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}